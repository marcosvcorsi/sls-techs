service: auth-service

plugins:
  - serverless-plugin-typescript
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    USERS_TABLE_NAME: ${self:custom.UsersTable.name}
    JWT_PRIVATE_KEY: ${file(private-key.pem)}
  iamRoleStatements:
    - ${file(iam/UsersTableIAM.yml):UsersTableIAM}

resources:
  Resources:
    UsersTable: ${file(resources/UsersTable.yml):UsersTable}
    
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'  

functions:
  auth:
    handler: src/handlers/auth.handler
    cors: true   

  createUser:
    handler: src/handlers/createUser.handler
    events:
      - http:
          method: POST
          path: /users
          cors: true
  
  login:
    handler: src/handlers/login.handler
    events:
      - http:
          method: POST
          path: /login
          cors: true
        
custom:
  UsersTable:
    name: !Ref UsersTable
    arn: !GetAtt UsersTable.Arn 

package:
  excludeDevDependencies: true
  exclude:
    - tests/**
    - jest.config.ts  